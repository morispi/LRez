.TH "robin_hood::pair< T1, T2 >" 3 "Tue Apr 20 2021" "Version 2.0" "LRez" \" -*- nroff -*-
.ad l
.nh
.SH NAME
robin_hood::pair< T1, T2 >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <robin_hood\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBfirst_type\fP = T1"
.br
.ti -1c
.RI "using \fBsecond_type\fP = T2"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename U1  = T1, typename U2  = T2, typename  = typename std::enable_if<std::is_default_constructible<U1>::value &&                                                 std::is_default_constructible<U2>::value>::type> constexpr \fBpair\fP () noexcept(noexcept(U1()) &&noexcept(U2()))"
.br
.ti -1c
.RI "constexpr \fBpair\fP (std::pair< T1, T2 > const &o) noexcept(noexcept(T1(std::declval< T1 const & >())) &&noexcept(T2(std::declval< T2 const & >())))"
.br
.ti -1c
.RI "constexpr \fBpair\fP (std::pair< T1, T2 > &&o) noexcept(noexcept(T1(std::move(std::declval< T1 && >()))) &&noexcept(T2(std::move(std::declval< T2 && >()))))"
.br
.ti -1c
.RI "constexpr \fBpair\fP (T1 &&a, T2 &&b) noexcept(noexcept(T1(std::move(std::declval< T1 && >()))) &&noexcept(T2(std::move(std::declval< T2 && >()))))"
.br
.ti -1c
.RI "template<typename U1 , typename U2 > constexpr \fBpair\fP (U1 &&a, U2 &&b) noexcept(noexcept(T1(std::forward< U1 >(std::declval< U1 && >()))) &&noexcept(T2(std::forward< U2 >(std::declval< U2 && >()))))"
.br
.ti -1c
.RI "template<typename\&.\&.\&. U1, typename\&.\&.\&. U2> constexpr \fBpair\fP (std::piecewise_construct_t, std::tuple< U1\&.\&.\&. > a, std::tuple< U2\&.\&.\&. > b) noexcept(noexcept(\fBpair\fP(std::declval< std::tuple< U1\&.\&.\&. > & >(), std::declval< std::tuple< U2\&.\&.\&. > & >(), \fBROBIN_HOOD_STD::index_sequence_for\fP< U1\&.\&.\&. >(), \fBROBIN_HOOD_STD::index_sequence_for\fP< U2\&.\&.\&. >())))"
.br
.ti -1c
.RI "template<typename\&.\&.\&. U1, size_t\&.\&.\&. I1, typename\&.\&.\&. U2, size_t\&.\&.\&. I2> \fBpair\fP (std::tuple< U1\&.\&.\&. > &a, std::tuple< U2\&.\&.\&. > &b, \fBROBIN_HOOD_STD::index_sequence\fP< I1\&.\&.\&. >, \fBROBIN_HOOD_STD::index_sequence\fP< I2\&.\&.\&. >) noexcept(noexcept(T1(std::forward< U1 >(std::get< I1 >(std::declval< std::tuple< U1\&.\&.\&. > & >()))\&.\&.\&.)) &&noexcept(T2(std::forward< U2 >(std::get< I2 >(std::declval< std::tuple< U2\&.\&.\&. > & >()))\&.\&.\&.)))"
.br
.ti -1c
.RI "void \fBswap\fP (\fBpair\fP< T1, T2 > &o) noexcept((\fBdetail::swappable::nothrow\fP< T1 >::value) &&(\fBdetail::swappable::nothrow\fP< T2 >::value))"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "T1 \fBfirst\fP"
.br
.ti -1c
.RI "T2 \fBsecond\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T1, typename T2>
.br
struct robin_hood::pair< T1, T2 >"

.PP
Definition at line 585 of file robin_hood\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename T1 , typename T2 > using \fBrobin_hood::pair\fP< T1, T2 >::\fBfirst_type\fP =  T1"

.PP
Definition at line 586 of file robin_hood\&.h\&.
.SS "template<typename T1 , typename T2 > using \fBrobin_hood::pair\fP< T1, T2 >::\fBsecond_type\fP =  T2"

.PP
Definition at line 587 of file robin_hood\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T1 , typename T2 > template<typename U1  = T1, typename U2  = T2, typename  = typename std::enable_if<std::is_default_constructible<U1>::value &&                                                 std::is_default_constructible<U2>::value>::type> constexpr \fBrobin_hood::pair\fP< T1, T2 >::\fBpair\fP ()\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definition at line 592 of file robin_hood\&.h\&.
.SS "template<typename T1 , typename T2 > constexpr \fBrobin_hood::pair\fP< T1, T2 >::\fBpair\fP (std::pair< T1, T2 > const & o)\fC [inline]\fP, \fC [explicit]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definition at line 597 of file robin_hood\&.h\&.
.SS "template<typename T1 , typename T2 > constexpr \fBrobin_hood::pair\fP< T1, T2 >::\fBpair\fP (std::pair< T1, T2 > && o)\fC [inline]\fP, \fC [explicit]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definition at line 603 of file robin_hood\&.h\&.
.SS "template<typename T1 , typename T2 > constexpr \fBrobin_hood::pair\fP< T1, T2 >::\fBpair\fP (T1 && a, T2 && b)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definition at line 608 of file robin_hood\&.h\&.
.SS "template<typename T1 , typename T2 > template<typename U1 , typename U2 > constexpr \fBrobin_hood::pair\fP< T1, T2 >::\fBpair\fP (U1 && a, U2 && b)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definition at line 614 of file robin_hood\&.h\&.
.SS "template<typename T1 , typename T2 > template<typename\&.\&.\&. U1, typename\&.\&.\&. U2> constexpr \fBrobin_hood::pair\fP< T1, T2 >::\fBpair\fP (std::piecewise_construct_t, std::tuple< U1\&.\&.\&. > a, std::tuple< U2\&.\&.\&. > b)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definition at line 620 of file robin_hood\&.h\&.
.SS "template<typename T1 , typename T2 > template<typename\&.\&.\&. U1, size_t\&.\&.\&. I1, typename\&.\&.\&. U2, size_t\&.\&.\&. I2> \fBrobin_hood::pair\fP< T1, T2 >::\fBpair\fP (std::tuple< U1\&.\&.\&. > & a, std::tuple< U2\&.\&.\&. > & b, \fBROBIN_HOOD_STD::index_sequence\fP< I1\&.\&.\&. >, \fBROBIN_HOOD_STD::index_sequence\fP< I2\&.\&.\&. >)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Definition at line 631 of file robin_hood\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename T1 , typename T2 > void \fBrobin_hood::pair\fP< T1, T2 >::swap (\fBpair\fP< T1, T2 > & o)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Definition at line 645 of file robin_hood\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename T1 , typename T2 > T1 \fBrobin_hood::pair\fP< T1, T2 >::first"

.PP
Definition at line 652 of file robin_hood\&.h\&.
.SS "template<typename T1 , typename T2 > T2 \fBrobin_hood::pair\fP< T1, T2 >::second"

.PP
Definition at line 653 of file robin_hood\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LRez from the source code\&.
