.TH "src/include/robin_hood.h" 3 "Tue Apr 20 2021" "Version 2.0" "LRez" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/include/robin_hood.h
.SH SYNOPSIS
.br
.PP
\fC#include <algorithm>\fP
.br
\fC#include <cstdlib>\fP
.br
\fC#include <cstring>\fP
.br
\fC#include <functional>\fP
.br
\fC#include <stdexcept>\fP
.br
\fC#include <string>\fP
.br
\fC#include <type_traits>\fP
.br
\fC#include <utility>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBrobin_hood::ROBIN_HOOD_STD::alignment_of< T >\fP"
.br
.ti -1c
.RI "class \fBrobin_hood::ROBIN_HOOD_STD::integer_sequence< T, Ints >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::ROBIN_HOOD_STD::detail_::IntSeqImpl< T, Begin, End, bool >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::ROBIN_HOOD_STD::detail_::IntSeqImpl< T, Begin, End, bool >::IntSeqCombiner< class, class >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::ROBIN_HOOD_STD::detail_::IntSeqImpl< T, Begin, End, bool >::IntSeqCombiner< integer_sequence< TValue, Inds0\&.\&.\&. >, integer_sequence< TValue, Inds1\&.\&.\&. > >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::ROBIN_HOOD_STD::detail_::IntSeqImpl< T, Begin, Begin, false >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::ROBIN_HOOD_STD::detail_::IntSeqImpl< T, Begin, End, true >\fP"
.br
.ti -1c
.RI "class \fBrobin_hood::detail::BulkPoolAllocator< T, MinNumAllocs, MaxNumAllocs >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::detail::NodeAllocator< T, MinSize, MaxSize, IsFlat >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::detail::NodeAllocator< T, MinSize, MaxSize, true >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::detail::NodeAllocator< T, MinSize, MaxSize, false >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::detail::identity_hash< T >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::detail::swappable::nothrow< T >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::is_transparent_tag\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::pair< T1, T2 >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::hash< T >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::hash< std::string >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::hash< T * >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::detail::has_is_transparent< T, typename >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::detail::has_is_transparent< T, typename T::is_transparent >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::detail::WrapHash< T >\fP"
.br
.ti -1c
.RI "struct \fBrobin_hood::detail::WrapKeyEqual< T >\fP"
.br
.ti -1c
.RI "class \fBrobin_hood::detail::Table< IsFlat, MaxLoadFactor100, Key, T, Hash, KeyEqual >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBrobin_hood\fP"
.br
.ti -1c
.RI " \fBrobin_hood::ROBIN_HOOD_STD\fP"
.br
.ti -1c
.RI " \fBrobin_hood::ROBIN_HOOD_STD::detail_\fP"
.br
.ti -1c
.RI " \fBrobin_hood::detail\fP"
.br
.ti -1c
.RI " \fBrobin_hood::detail::swappable\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBROBIN_HOOD_VERSION_MAJOR\fP   3"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_VERSION_MINOR\fP   7"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_VERSION_PATCH\fP   0"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_LOG\fP(x)"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_TRACE\fP(x)"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_COUNT\fP(x)"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD\fP(x)   ROBIN_HOOD_PRIVATE_DEFINITION_##x()"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_UNUSED\fP(identifier)"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_BITNESS\fP()   32"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_LITTLE_ENDIAN\fP()   (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_BIG_ENDIAN\fP()   (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_NOINLINE\fP()   __attribute__((noinline))"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_HAS_EXCEPTIONS\fP()   0"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_CTZ\fP()   __builtin_ctzl"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_CLZ\fP()   __builtin_clzl"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_COUNT_LEADING_ZEROES\fP(x)   ((x) ? \fBROBIN_HOOD\fP(CLZ)(x) : \fBROBIN_HOOD\fP(BITNESS))"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_COUNT_TRAILING_ZEROES\fP(x)   ((x) ? \fBROBIN_HOOD\fP(CTZ)(x) : \fBROBIN_HOOD\fP(BITNESS))"
.br
.ti -1c
.RI "#define \fB__has_cpp_attribute\fP(x)   0"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_FALLTHROUGH\fP()"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_LIKELY\fP(condition)   __builtin_expect(condition, 1)"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_UNLIKELY\fP(condition)   __builtin_expect(condition, 0)"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_IS_TRIVIALLY_COPYABLE\fP(\&.\&.\&.)   std::is_trivially_copyable<__VA_ARGS__>::value"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_CXX\fP()   __cplusplus"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_CXX98\fP()   199711L"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_CXX11\fP()   201103L"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_CXX14\fP()   201402L"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_CXX17\fP()   201703L"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_NODISCARD\fP()"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_PRIVATE_DEFINITION_HAS_CRC32\fP()   0"
.br
.ti -1c
.RI "#define \fBROBIN_HOOD_HASH_INT\fP(T)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "template<std::size_t\&.\&.\&. Inds> using \fBrobin_hood::ROBIN_HOOD_STD::index_sequence\fP = integer_sequence< std::size_t, Inds\&.\&.\&. >"
.br
.ti -1c
.RI "template<class T , T N> using \fBrobin_hood::ROBIN_HOOD_STD::make_integer_sequence\fP = typename detail_::IntSeqImpl< T, 0, N,(N \- 0)==1 >::TResult"
.br
.ti -1c
.RI "template<std::size_t N> using \fBrobin_hood::ROBIN_HOOD_STD::make_index_sequence\fP = make_integer_sequence< std::size_t, N >"
.br
.ti -1c
.RI "template<class\&.\&.\&. T> using \fBrobin_hood::ROBIN_HOOD_STD::index_sequence_for\fP = make_index_sequence< sizeof\&.\&.\&.(T)>"
.br
.ti -1c
.RI "template<typename Key , typename T , typename Hash  = hash<Key>, typename KeyEqual  = std::equal_to<Key>, size_t MaxLoadFactor100 = 80> using \fBrobin_hood::unordered_flat_map\fP = detail::Table< true, MaxLoadFactor100, Key, T, Hash, KeyEqual >"
.br
.ti -1c
.RI "template<typename Key , typename T , typename Hash  = hash<Key>, typename KeyEqual  = std::equal_to<Key>, size_t MaxLoadFactor100 = 80> using \fBrobin_hood::unordered_node_map\fP = detail::Table< false, MaxLoadFactor100, Key, T, Hash, KeyEqual >"
.br
.ti -1c
.RI "template<typename Key , typename T , typename Hash  = hash<Key>, typename KeyEqual  = std::equal_to<Key>, size_t MaxLoadFactor100 = 80> using \fBrobin_hood::unordered_map\fP = detail::Table< sizeof(\fBrobin_hood::pair\fP< Key, T >)<=sizeof(size_t) *6 &&std::is_nothrow_move_constructible< \fBrobin_hood::pair\fP< Key, T > >::value &&std::is_nothrow_move_assignable< \fBrobin_hood::pair\fP< Key, T > >::value, MaxLoadFactor100, Key, T, Hash, KeyEqual >"
.br
.ti -1c
.RI "template<typename Key , typename Hash  = hash<Key>, typename KeyEqual  = std::equal_to<Key>, size_t MaxLoadFactor100 = 80> using \fBrobin_hood::unordered_flat_set\fP = detail::Table< true, MaxLoadFactor100, Key, void, Hash, KeyEqual >"
.br
.ti -1c
.RI "template<typename Key , typename Hash  = hash<Key>, typename KeyEqual  = std::equal_to<Key>, size_t MaxLoadFactor100 = 80> using \fBrobin_hood::unordered_node_set\fP = detail::Table< false, MaxLoadFactor100, Key, void, Hash, KeyEqual >"
.br
.ti -1c
.RI "template<typename Key , typename Hash  = hash<Key>, typename KeyEqual  = std::equal_to<Key>, size_t MaxLoadFactor100 = 80> using \fBrobin_hood::unordered_set\fP = detail::Table< sizeof(Key)<=sizeof(size_t) *6 &&std::is_nothrow_move_constructible< Key >::value &&std::is_nothrow_move_assignable< Key >::value, MaxLoadFactor100, Key, void, Hash, KeyEqual >"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > T \fBrobin_hood::detail::rotr\fP (T x, unsigned k)"
.br
.ti -1c
.RI "template<typename T > T \fBrobin_hood::detail::reinterpret_cast_no_cast_align_warning\fP (void *ptr) noexcept"
.br
.ti -1c
.RI "template<typename T > T \fBrobin_hood::detail::reinterpret_cast_no_cast_align_warning\fP (void const *ptr) noexcept"
.br
.ti -1c
.RI "template<typename E , typename\&.\&.\&. Args> void \fBrobin_hood::detail::doThrow\fP (Args &&\&.\&.\&. \fBROBIN_HOOD_UNUSED\fP(args))"
.br
.ti -1c
.RI "template<typename E , typename T , typename\&.\&.\&. Args> T * \fBrobin_hood::detail::assertNotNull\fP (T *t, Args &&\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename T > T \fBrobin_hood::detail::unaligned_load\fP (void const *ptr) noexcept"
.br
.ti -1c
.RI "template<typename A , typename B > void \fBrobin_hood::swap\fP (pair< A, B > &a, pair< A, B > &b) noexcept(noexcept(std::declval< pair< A, B > & >()\&.swap(std::declval< pair< A, B > & >())))"
.br
.ti -1c
.RI "template<typename A , typename B > constexpr bool \fBrobin_hood::operator==\fP (pair< A, B > const &x, pair< A, B > const &y)"
.br
.ti -1c
.RI "template<typename A , typename B > constexpr bool \fBrobin_hood::operator!=\fP (pair< A, B > const &x, pair< A, B > const &y)"
.br
.ti -1c
.RI "template<typename A , typename B > constexpr bool \fBrobin_hood::operator<\fP (pair< A, B > const &x, pair< A, B > const &y) noexcept(noexcept(std::declval< A const & >()< std::declval< A const & >()) &&noexcept(std::declval< B const & >()< std::declval< B const & >()))"
.br
.ti -1c
.RI "template<typename A , typename B > constexpr bool \fBrobin_hood::operator>\fP (pair< A, B > const &x, pair< A, B > const &y)"
.br
.ti -1c
.RI "template<typename A , typename B > constexpr bool \fBrobin_hood::operator<=\fP (pair< A, B > const &x, pair< A, B > const &y)"
.br
.ti -1c
.RI "template<typename A , typename B > constexpr bool \fBrobin_hood::operator>=\fP (pair< A, B > const &x, pair< A, B > const &y)"
.br
.ti -1c
.RI "size_t \fBrobin_hood::hash_int\fP (uint64_t obj) noexcept"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (bool)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (char)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (signed char)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (unsigned char)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (char16_t)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (char32_t)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (wchar_t)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (short)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (unsigned short)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (int)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (unsigned int)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (long)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (long long)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (unsigned long)"
.br
.ti -1c
.RI "\fBrobin_hood::ROBIN_HOOD_HASH_INT\fP (unsigned long long)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define __has_cpp_attribute(x)   0"

.PP
Definition at line 175 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD(x)   ROBIN_HOOD_PRIVATE_DEFINITION_##x()"

.PP
Definition at line 92 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_COUNT(x)"

.PP
Definition at line 87 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_COUNT_LEADING_ZEROES(x)   ((x) ? \fBROBIN_HOOD\fP(CLZ)(x) : \fBROBIN_HOOD\fP(BITNESS))"

.PP
Definition at line 169 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_COUNT_TRAILING_ZEROES(x)   ((x) ? \fBROBIN_HOOD\fP(CTZ)(x) : \fBROBIN_HOOD\fP(BITNESS))"

.PP
Definition at line 170 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_HASH_INT(T)"
\fBValue:\fP
.PP
.nf
    template <>                                          \
    struct hash<T> {                                     \
        size_t operator()(T obj) const noexcept {        \
            return hash_int(static_cast<uint64_t>(obj)); \
        }                                                \
    }
.fi
.PP
Definition at line 795 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_IS_TRIVIALLY_COPYABLE( \&.\&.\&.)   std::is_trivially_copyable<__VA_ARGS__>::value"

.PP
Definition at line 199 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_LIKELY(condition)   __builtin_expect(condition, 1)"

.PP
Definition at line 190 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_LOG(x)"

.PP
Definition at line 56 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_BIG_ENDIAN()   (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)"

.PP
Definition at line 113 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_BITNESS()   32"

.PP
Definition at line 99 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_CLZ()   __builtin_clzl"

.PP
Definition at line 164 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_CTZ()   __builtin_ctzl"

.PP
Definition at line 163 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_CXX()   __cplusplus"

.PP
Definition at line 203 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_CXX11()   201103L"

.PP
Definition at line 205 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_CXX14()   201402L"

.PP
Definition at line 206 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_CXX17()   201703L"

.PP
Definition at line 207 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_CXX98()   199711L"

.PP
Definition at line 204 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_FALLTHROUGH()"

.PP
Definition at line 182 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_HAS_CRC32()   0"

.PP
Definition at line 232 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_HAS_EXCEPTIONS()   0"

.PP
Definition at line 125 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_LITTLE_ENDIAN()   (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)"

.PP
Definition at line 111 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_NODISCARD()"

.PP
Definition at line 212 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_PRIVATE_DEFINITION_NOINLINE()   __attribute__((noinline))"

.PP
Definition at line 120 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_TRACE(x)"

.PP
Definition at line 65 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_UNLIKELY(condition)   __builtin_expect(condition, 0)"

.PP
Definition at line 191 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_UNUSED(identifier)"

.PP
Definition at line 95 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_VERSION_MAJOR   3"

.PP
Definition at line 38 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_VERSION_MINOR   7"

.PP
Definition at line 39 of file robin_hood\&.h\&.
.SS "#define ROBIN_HOOD_VERSION_PATCH   0"

.PP
Definition at line 40 of file robin_hood\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for LRez from the source code\&.
