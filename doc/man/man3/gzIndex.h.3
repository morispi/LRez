.TH "includoc/gzIndex.h" 3 "Tue Apr 20 2021" "Version 2.0" "LRez" \" -*- nroff -*-
.ad l
.nh
.SH NAME
includoc/gzIndex.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <zlib\&.h>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <fstream>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBpoint\fP"
.br
.ti -1c
.RI "struct \fBaccess\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBlocal\fP   static"
.br
.ti -1c
.RI "#define \fBSPAN\fP   1048576L       /* desired distance between \fBaccess\fP points */"
.br
.ti -1c
.RI "#define \fBWINSIZE\fP   32768U      /* sliding window size */"
.br
.ti -1c
.RI "#define \fBCHUNK\fP   16384         /* file input buffer size */"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBfreeGzIndex\fP (struct \fBaccess\fP *index)"
.br
.ti -1c
.RI "void \fBserializeGzIndex\fP (struct \fBaccess\fP *index, string outputFile)"
.br
.ti -1c
.RI "struct \fBaccess\fP * \fBdeserializeGzIndex\fP (struct \fBaccess\fP *index, string inputFile)"
.br
.ti -1c
.RI "int \fBbuildGzIndex\fP (string, off_t span, struct \fBaccess\fP **built)"
.br
.ti -1c
.RI "int \fBbuildGzIndex_Stream\fP (FILE *in, off_t span, struct \fBaccess\fP **built)"
.br
.ti -1c
.RI "int \fBextract\fP (string gzFile, struct \fBaccess\fP *index, off_t offset, unsigned char *buf, int len)"
.br
.ti -1c
.RI "int \fBextract_Stream\fP (FILE *in, struct \fBaccess\fP *index, off_t offset, unsigned char *buf, int len)"
.br
.ti -1c
.RI "string \fBextractFastqReadFromOffset\fP (FILE *in, struct \fBaccess\fP *index, off_t offset)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CHUNK   16384         /* file input buffer size */"

.SS "#define local   static"

.SS "#define SPAN   1048576L       /* desired distance between \fBaccess\fP points */"

.SS "#define WINSIZE   32768U      /* sliding window size */"

.SH "Function Documentation"
.PP 
.SS "int buildGzIndex (string, off_t span, struct \fBaccess\fP ** built)"
Index a given gzip file\&.
.PP
\fBParameters\fP
.RS 4
\fIgzFile\fP gzip file to build the index for 
.br
\fIspan\fP build access points every span bits of uncompressed output 
.br
\fIbuilt\fP structure where to store the index 
.RE
.PP
\fBReturns\fP
.RS 4
the number of access points on success (>=1), Z_MEM_ERROR for out of memory, Z_DATA_ERROR for an error in the input file, or Z_ERRNO for a file read error\&. On success, *built points to the resulting index\&. 
.RE
.PP

.SS "int buildGzIndex_Stream (FILE * in, off_t span, struct \fBaccess\fP ** built)"
Index a given gzip file\&.
.PP
\fBParameters\fP
.RS 4
\fIFILE\fP open on the desired gzip file to build the index for 
.br
\fIspan\fP build access points every span bits of uncompressed output 
.br
\fIbuilt\fP structure where to store the index 
.RE
.PP
\fBReturns\fP
.RS 4
the number of access points on success (>=1), Z_MEM_ERROR for out of memory, Z_DATA_ERROR for an error in the input file, or Z_ERRNO for a file read error\&. On success, *built points to the resulting index\&. 
.RE
.PP

.SS "struct \fBaccess\fP* deserializeGzIndex (struct \fBaccess\fP * index, string inputFile)"
Deserialize a gzip index from a file\&.
.PP
\fBParameters\fP
.RS 4
\fIindex\fP index to fill 
.br
\fIinputFile\fP file where the index is stored 
.RE
.PP
\fBReturns\fP
.RS 4
the index populated with the contents of the file 
.RE
.PP

.SS "int extract (string gzFile, struct \fBaccess\fP * index, off_t offset, unsigned char * buf, int len)"
Extract data starting from a given offset off the uncompressed file, using the index\&.
.PP
\fBParameters\fP
.RS 4
\fIgzFile\fP gzip to extract data from 
.br
\fIindex\fP the index of the gzip file 
.br
\fIoffset\fP offset to start extracting data from 
.br
\fIbuf\fP buffer where to store the extracted data 
.br
\fIlen\fP number of bytes to extract 
.RE
.PP
\fBReturns\fP
.RS 4
bytes read or negative for error (Z_DATA_ERROR or Z_MEM_ERROR) 
.RE
.PP

.SS "int extract_Stream (FILE * in, struct \fBaccess\fP * index, off_t offset, unsigned char * buf, int len)"
Extract data starting from a given offset off the uncompressed file, using the index\&.
.PP
\fBParameters\fP
.RS 4
\fIin\fP FILE open on the desired gzip file 
.br
\fIindex\fP the index of the gzip file 
.br
\fIoffset\fP offset to start extracting data from 
.br
\fIbuf\fP buffer where to store the extracted data 
.br
\fIlen\fP number of bytes to extract 
.RE
.PP
\fBReturns\fP
.RS 4
bytes read or negative for error (Z_DATA_ERROR or Z_MEM_ERROR) 
.RE
.PP

.SS "string extractFastqReadFromOffset (FILE * in, struct \fBaccess\fP * index, off_t offset)"
Extract the fastq format read at the specified offset\&.
.PP
\fBParameters\fP
.RS 4
\fIin\fP FILE open on the desired gzip file 
.br
\fIindex\fP the index of the gzip file 
.br
\fIoffset\fP offset off the read to extract 
.RE
.PP
\fBReturns\fP
.RS 4
the extracted read in fastq format 
.RE
.PP

.SS "void freeGzIndex (struct \fBaccess\fP * index)"
Deallocate an index built by build_index()
.PP
\fBParameters\fP
.RS 4
\fIindex\fP index to deallocate 
.RE
.PP

.SS "void serializeGzIndex (struct \fBaccess\fP * index, string outputFile)"
Serialize the gzip index into a file\&.
.PP
\fBParameters\fP
.RS 4
\fIindex\fP index to serialize 
.br
\fIoutputFile\fP file where to store the index 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for LRez from the source code\&.
